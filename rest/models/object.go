// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"strconv"

	strfmt "github.com/go-openapi/strfmt"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/swag"
)

// Object object
// swagger:model Object
type Object struct {

	// description1
	Description1 string `json:"Description1,omitempty"`

	// description2
	Description2 string `json:"Description2,omitempty"`

	// l w m2 m version
	LWM2MVersion string `json:"LWM2MVersion,omitempty"`

	// mandatory
	Mandatory MandatoryType `json:"Mandatory,omitempty"`

	// multiple instances
	MultipleInstances InstanceType `json:"MultipleInstances,omitempty"`

	// name
	Name string `json:"Name,omitempty"`

	// object ID
	ObjectID int64 `json:"ObjectID,omitempty"`

	// object u r n
	ObjectURN string `json:"ObjectURN,omitempty"`

	// object version
	ObjectVersion string `json:"ObjectVersion,omitempty"`

	// resources
	Resources *ObjectResources `json:"Resources,omitempty"`
}

// Validate validates this object
func (m *Object) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateMandatory(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateMultipleInstances(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateResources(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *Object) validateMandatory(formats strfmt.Registry) error {

	if swag.IsZero(m.Mandatory) { // not required
		return nil
	}

	if err := m.Mandatory.Validate(formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("Mandatory")
		}
		return err
	}

	return nil
}

func (m *Object) validateMultipleInstances(formats strfmt.Registry) error {

	if swag.IsZero(m.MultipleInstances) { // not required
		return nil
	}

	if err := m.MultipleInstances.Validate(formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("MultipleInstances")
		}
		return err
	}

	return nil
}

func (m *Object) validateResources(formats strfmt.Registry) error {

	if swag.IsZero(m.Resources) { // not required
		return nil
	}

	if m.Resources != nil {
		if err := m.Resources.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("Resources")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *Object) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *Object) UnmarshalBinary(b []byte) error {
	var res Object
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// ObjectResources object resources
// swagger:model ObjectResources
type ObjectResources struct {

	// item
	Item []*Resource `json:"Item"`
}

// Validate validates this object resources
func (m *ObjectResources) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateItem(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *ObjectResources) validateItem(formats strfmt.Registry) error {

	if swag.IsZero(m.Item) { // not required
		return nil
	}

	for i := 0; i < len(m.Item); i++ {
		if swag.IsZero(m.Item[i]) { // not required
			continue
		}

		if m.Item[i] != nil {
			if err := m.Item[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("Resources" + "." + "Item" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (m *ObjectResources) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *ObjectResources) UnmarshalBinary(b []byte) error {
	var res ObjectResources
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
