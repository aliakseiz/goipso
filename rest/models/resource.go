// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	strfmt "github.com/go-openapi/strfmt"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/swag"
)

// Resource resource
// swagger:model Resource
type Resource struct {

	// description
	Description string `json:"Description,omitempty"`

	// ID
	ID int64 `json:"ID,omitempty" xml:"ID,attr"`

	// mandatory
	Mandatory MandatoryType `json:"Mandatory,omitempty"`

	// multiple instances
	MultipleInstances InstanceType `json:"MultipleInstances,omitempty"`

	// name
	Name string `json:"Name,omitempty"`

	// operations
	Operations OperationType `json:"Operations,omitempty"`

	// range enumeration
	RangeEnumeration string `json:"RangeEnumeration,omitempty"`

	// type
	Type Type `json:"Type,omitempty"`

	// units
	Units string `json:"Units,omitempty"`
}

// Validate validates this resource
func (m *Resource) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateMandatory(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateMultipleInstances(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateOperations(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateType(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *Resource) validateMandatory(formats strfmt.Registry) error {

	if swag.IsZero(m.Mandatory) { // not required
		return nil
	}

	if err := m.Mandatory.Validate(formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("Mandatory")
		}
		return err
	}

	return nil
}

func (m *Resource) validateMultipleInstances(formats strfmt.Registry) error {

	if swag.IsZero(m.MultipleInstances) { // not required
		return nil
	}

	if err := m.MultipleInstances.Validate(formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("MultipleInstances")
		}
		return err
	}

	return nil
}

func (m *Resource) validateOperations(formats strfmt.Registry) error {

	if swag.IsZero(m.Operations) { // not required
		return nil
	}

	if err := m.Operations.Validate(formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("Operations")
		}
		return err
	}

	return nil
}

func (m *Resource) validateType(formats strfmt.Registry) error {

	if swag.IsZero(m.Type) { // not required
		return nil
	}

	if err := m.Type.Validate(formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("Type")
		}
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *Resource) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *Resource) UnmarshalBinary(b []byte) error {
	var res Resource
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
