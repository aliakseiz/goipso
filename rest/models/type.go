// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"

	strfmt "github.com/go-openapi/strfmt"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/validate"
)

// Type type
// swagger:model Type
type Type string

const (

	// TypeString captures enum value "String"
	TypeString Type = "String"

	// TypeBoolean captures enum value "Boolean"
	TypeBoolean Type = "Boolean"

	// TypeInteger captures enum value "Integer"
	TypeInteger Type = "Integer"

	// TypeFloat captures enum value "Float"
	TypeFloat Type = "Float"

	// TypeObjLink captures enum value "ObjLink"
	TypeObjLink Type = "ObjLink"

	// TypeOpaque captures enum value "Opaque"
	TypeOpaque Type = "Opaque"
)

// for schema
var typeEnum []interface{}

func init() {
	var res []Type
	if err := json.Unmarshal([]byte(`["String","Boolean","Integer","Float","ObjLink","Opaque"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		typeEnum = append(typeEnum, v)
	}
}

func (m Type) validateTypeEnum(path, location string, value Type) error {
	if err := validate.Enum(path, location, value, typeEnum); err != nil {
		return err
	}
	return nil
}

// Validate validates this type
func (m Type) Validate(formats strfmt.Registry) error {
	var res []error

	// value enum
	if err := m.validateTypeEnum("", "body", m); err != nil {
		return err
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
