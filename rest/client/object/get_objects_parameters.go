// Code generated by go-swagger; DO NOT EDIT.

package object

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"net/http"
	"time"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/swag"

	strfmt "github.com/go-openapi/strfmt"
)

// NewGetObjectsParams creates a new GetObjectsParams object
// with the default values initialized.
func NewGetObjectsParams() *GetObjectsParams {
	var ()
	return &GetObjectsParams{

		timeout: cr.DefaultTimeout,
	}
}

// NewGetObjectsParamsWithTimeout creates a new GetObjectsParams object
// with the default values initialized, and the ability to set a timeout on a request
func NewGetObjectsParamsWithTimeout(timeout time.Duration) *GetObjectsParams {
	var ()
	return &GetObjectsParams{

		timeout: timeout,
	}
}

// NewGetObjectsParamsWithContext creates a new GetObjectsParams object
// with the default values initialized, and the ability to set a context for a request
func NewGetObjectsParamsWithContext(ctx context.Context) *GetObjectsParams {
	var ()
	return &GetObjectsParams{

		Context: ctx,
	}
}

// NewGetObjectsParamsWithHTTPClient creates a new GetObjectsParams object
// with the default values initialized, and the ability to set a custom HTTPClient for a request
func NewGetObjectsParamsWithHTTPClient(client *http.Client) *GetObjectsParams {
	var ()
	return &GetObjectsParams{
		HTTPClient: client,
	}
}

/*GetObjectsParams contains all the parameters to send to the API endpoint
for the get objects operation typically these are written to a http.Request
*/
type GetObjectsParams struct {

	/*ObjectID
	  ID of object to retrieve

	*/
	ObjectID *int64
	/*ObjectVersion
	  Version of object to retrieve

	*/
	ObjectVersion *string

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithTimeout adds the timeout to the get objects params
func (o *GetObjectsParams) WithTimeout(timeout time.Duration) *GetObjectsParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the get objects params
func (o *GetObjectsParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the get objects params
func (o *GetObjectsParams) WithContext(ctx context.Context) *GetObjectsParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the get objects params
func (o *GetObjectsParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the get objects params
func (o *GetObjectsParams) WithHTTPClient(client *http.Client) *GetObjectsParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the get objects params
func (o *GetObjectsParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithObjectID adds the objectID to the get objects params
func (o *GetObjectsParams) WithObjectID(objectID *int64) *GetObjectsParams {
	o.SetObjectID(objectID)
	return o
}

// SetObjectID adds the objectId to the get objects params
func (o *GetObjectsParams) SetObjectID(objectID *int64) {
	o.ObjectID = objectID
}

// WithObjectVersion adds the objectVersion to the get objects params
func (o *GetObjectsParams) WithObjectVersion(objectVersion *string) *GetObjectsParams {
	o.SetObjectVersion(objectVersion)
	return o
}

// SetObjectVersion adds the objectVersion to the get objects params
func (o *GetObjectsParams) SetObjectVersion(objectVersion *string) {
	o.ObjectVersion = objectVersion
}

// WriteToRequest writes these params to a swagger request
func (o *GetObjectsParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	if o.ObjectID != nil {

		// query param ObjectID
		var qrObjectID int64
		if o.ObjectID != nil {
			qrObjectID = *o.ObjectID
		}
		qObjectID := swag.FormatInt64(qrObjectID)
		if qObjectID != "" {
			if err := r.SetQueryParam("ObjectID", qObjectID); err != nil {
				return err
			}
		}

	}

	if o.ObjectVersion != nil {

		// query param ObjectVersion
		var qrObjectVersion string
		if o.ObjectVersion != nil {
			qrObjectVersion = *o.ObjectVersion
		}
		qObjectVersion := qrObjectVersion
		if qObjectVersion != "" {
			if err := r.SetQueryParam("ObjectVersion", qObjectVersion); err != nil {
				return err
			}
		}

	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
